{"version":3,"sources":["serviceWorker.js","firebase.tsx","Hooks/useRoomControls.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","useRoomControls","room","useState","controls","setControls","useEffect","ref","database","child","on","snapshot","val","console","log","off","App","ifttt","IFTTT","genControl","name","key","onClick","eventName","post","className","setLowercaseExceptFirst","word","charAt","toUpperCase","toLowerCase","slice","id","Object","keys","map","i","rootElement","document","getElementById","app","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sDCLNC,IAASC,cAXI,CACXC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,8BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKFT,QAAf,ECIeU,MAhBf,SAAyBC,GAAc,IAAD,EACJC,qBADI,mBAC7BC,EAD6B,KACnBC,EADmB,KAapC,OAVAC,qBAAU,WACR,IAAMC,EAAMhB,EAASiB,WAAWD,IAAI,SAASE,MAAMP,GAMnD,OALAK,EAAIG,GAAG,SAAS,SAAAC,GACdN,EAAYM,EAASC,OACrBC,QAAQC,IAAIH,EAASC,UAGhB,kBAAML,EAAIQ,IAAI,YACpB,CAACb,IAEGE,GCeMY,MAzBf,WACE,IAAMC,EAAQ,IAAIC,IAAM,+CAClBd,EAAgBH,EAAgB,WAGhCkB,EACJ,SAACC,EAAcC,GAAf,OACE,yBACEC,QAAS,kBALcC,EAKYnB,EAASgB,GALCH,EAAMO,KAAKD,EAAW,IAA7C,IAACA,GAMvBF,IAAKA,EACLI,UAAU,WACTC,EAAwBN,KAGzBM,EAA0B,SAACC,GAAD,OAAkBA,EAAKC,OAAO,GAAGC,cAAgBF,EAAKG,cAAcC,MAAM,IAE1G,OACE,yBAAKC,GAAG,OACN,yBAAKP,UAAU,YACZrB,EAAW6B,OAAOC,KAAK9B,GAAU+B,KAAI,SAACf,EAAMgB,GAAP,OAAajB,EAAWC,EAAMgB,MAAM,QClB5EC,EAAcC,SAASC,eAAe,QACtCC,EACJ,gBAAC,IAAD,KACE,gBAAC,EAAD,OAIAH,EAAYI,gBACdC,kBAAQF,EAAKH,GAEbM,iBAAOH,EAAKH,GJkHR,kBAAmBO,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtC,QAAQsC,MAAMA,EAAMC,c","file":"static/js/main.75372999.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import firebase from 'firebase';\n// Your web app's Firebase configuration\nvar config = {\n  apiKey: \"AIzaSyDo9I7YPQvPZs11GToKL4QaCeZZa4IF8YQ\",\n  authDomain: \"smartdorm-b78db.firebaseapp.com\",\n  databaseURL: \"https://smartdorm-b78db.firebaseio.com\",\n  projectId: \"smartdorm-b78db\",\n  storageBucket: \"smartdorm-b78db.appspot.com\",\n  messagingSenderId: \"787568378859\",\n  appId: \"1:787568378859:web:204b0b9ab5fa8535334fae\",\n  measurementId: \"G-LTJ4N9893T\"\n};\n// Initialize Firebase\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import { useEffect, useState } from 'react';\nimport firebase from '../firebase';\n\nfunction useRoomControls(room: string){\n  const [controls, setControls] = useState();\n\n  useEffect(() => {\n    const ref = firebase.database().ref('rooms').child(room);\n    ref.on('value', snapshot => {\n      setControls(snapshot.val())\n      console.log(snapshot.val());\n    });\n\n    return () => ref.off('value');\n  }, [room]);\n\n  return controls;\n}\n\nexport default useRoomControls;\n","import React from 'react';\nimport IFTTT from 'ifttt-webhooks-channel';\nimport './scss/App.scss';\n\nimport useRoomControls from './Hooks/useRoomControls';\n\nfunction App() {\n  const ifttt = new IFTTT('kMA10M_HeHbiByE5y1g9_GE1ZHyGYQr2f72A1SAJ9N4');\n  const controls: any = useRoomControls('bedroom');\n  const triggerIFTTTWebHook = (eventName: string) => ifttt.post(eventName, []);\n\n  const genControl =\n    (name: string, key: number) =>\n      <div\n        onClick={() => triggerIFTTTWebHook(controls[name])}\n        key={key}\n        className='control'>\n        {setLowercaseExceptFirst(name)}\n      </div>;\n\n  const setLowercaseExceptFirst = (word: string) => word.charAt(0).toUpperCase() + word.toLowerCase().slice(1)\n\n  return (\n    <div id='App'>\n      <div className='controls'>\n        {controls ? Object.keys(controls).map((name, i) => genControl(name, i)) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import * as React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { hydrate, render } from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nconst rootElement = document.getElementById(\"root\")!;\nconst app = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n\nif (rootElement.hasChildNodes()) {\n  hydrate(app, rootElement);\n} else {\n  render(app, rootElement);\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}