{"version":3,"sources":["serviceWorker.js","firebase.tsx","Hooks/useRoomControls.tsx","Components/ControlPanel.tsx","Hooks/useRoomNames.tsx","Components/Menu.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","useRoomControls","room","useState","controls","setControls","useEffect","length","ref","database","child","on","snapshot","val","off","ControlPanel","props","ifttt","IFTTT","genControl","total","name","key","onClick","eventName","post","className","style","lineHeight","setLowercaseExceptFirst","word","charAt","toUpperCase","toLowerCase","slice","inBackground","Object","keys","map","i","useRoomNames","rooms","setRooms","Menu","roomNames","id","handleMenuClose","onRoomChange","genRoomItem","App","showMenu","setShowMenu","setRoom","rootElement","document","getElementById","app","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.561e6b99.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as firebase from 'firebase';\n// Your web app's Firebase configuration\n\nconst config = {\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID\n};\n// Initialize Firebase\nfirebase.initializeApp(config);\n\nexport default firebase;\n","import { useEffect, useState } from 'react';\nimport firebase from '../firebase';\n\nfunction useRoomControls(room: string){\n  const [controls, setControls] = useState({});\n\n  useEffect(() => {\n    if (room.length === 0){\n      return;\n    }\n    const ref = firebase.database().ref('rooms').child(room);\n    ref.on('value', snapshot => {\n      setControls(snapshot.val())\n    });\n\n    return () => ref.off('value');\n  }, [room]);\n\n  return controls;\n}\n\nexport default useRoomControls;\n","import React from 'react';\nimport IFTTT from 'ifttt-webhooks-channel';\nimport '../scss/ControlPanel.scss';\n\nimport useRoomControls from '../Hooks/useRoomControls';\n\ntype Props = {\n  room: string,\n  inBackground: boolean\n}\n\nfunction ControlPanel(props: Props) {\n  const ifttt = new IFTTT(process.env.REACT_APP_IFTTT_KEY!);\n  const controls: any = useRoomControls(props.room);\n  const triggerIFTTTWebHook = (eventName: string) => ifttt.post(eventName, []);\n\n  const genControl =\n    (total: number, name: string, key: number) =>\n      <div\n        onClick={() => triggerIFTTTWebHook(controls[name])}\n        key={key}\n        className={'control noselect'}\n        style={{ lineHeight: 80 / total + 'vh' }}>\n        {setLowercaseExceptFirst(name)}\n      </div>;\n\n  const setLowercaseExceptFirst = (word: string) => word.charAt(0).toUpperCase() + word.toLowerCase().slice(1)\n\n  return (\n    <div className = {'controls animated' + (props.inBackground ? ' blurred' : '')} >\n      { controls? Object.keys(controls).map((name, i) => genControl(Object.keys(controls).length, name, i)) : null}\n    </div >\n  );\n}\n\nexport default ControlPanel;\n","import { useEffect, useState } from 'react';\nimport firebase from '../firebase';\n\nfunction useRoomNames(){\n  const [rooms, setRooms] = useState<string[]>([]);\n\n  useEffect(() => {\n    const ref = firebase.database().ref('rooms');\n    ref.on('value', snapshot => {\n      setRooms(Object.keys(snapshot.val()))\n    });\n\n    return () => ref.off('value');\n  });\n\n  return rooms;\n}\n\nexport default useRoomNames;\n","import React from 'react';\nimport '../scss/Menu.scss';\n\nimport useRoomNames from '../Hooks/useRoomNames';\n\ntype Props = {\n  room: string,\n  onRoomChange: (arg0: string) => void,\n  handleMenuClose: () => void\n}\n\nfunction Menu(props: Props) {\n  const roomNames: any = useRoomNames();\n  const setLowercaseExceptFirst = (word: string) => word.charAt(0).toUpperCase() + word.toLowerCase().slice(1);\n  const genRoomItem = (name: string) =>\n    <div\n      onClick={() => props.onRoomChange(name)}\n      className={'room-option' + (name === props.room ? ' selected' : '')}>\n      {setLowercaseExceptFirst(name)}\n    </div>\n\n  return (\n    <div id='menu'>\n      <div className='bg' onClick={props.handleMenuClose}></div>\n      {roomNames.map((name: string) => genRoomItem(name))}\n    </div >\n  );\n}\n\nexport default Menu;\n","import React, { useState } from 'react';\nimport './scss/App.scss';\n\nimport ControlPanel from './Components/ControlPanel';\nimport Menu from './Components/Menu';\n\nfunction App() {\n  const [showMenu, setShowMenu] = useState(true);\n  const [room, setRoom] = useState('bedroom');\n\n  return (\n    <div id='App'>\n      <div id='menu-toggle' onClick={() => setShowMenu(!showMenu)}>⪌</div>\n      <ControlPanel room={room} inBackground={showMenu} />\n      {showMenu &&\n        <Menu\n          room={room}\n          onRoomChange={setRoom}\n          handleMenuClose={() => setShowMenu(false)}\n        />}\n    </div>\n  );\n}\n\nexport default App;\n","import * as React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport { hydrate, render } from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\n\nconst rootElement = document.getElementById(\"root\")!;\nconst app = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n\nif (rootElement.hasChildNodes()) {\n  hydrate(app, rootElement);\n} else {\n  render(app, rootElement);\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}